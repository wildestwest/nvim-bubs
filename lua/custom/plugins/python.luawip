-- return {
--   'nvim-treesitter/nvim-treesitter',
--   opts = { ensure_installed = { 'ninja', 'rst' } },
-- }, {
--   'neovim/nvim-lspconfig',
--   opts = {
--     servers = {
--       ruff = {
--         cmd_env = { RUFF_TRACE = 'messages' },
--         init_options = {
--           settings = {
--             logLevel = 'error',
--           },
--         },
--         keys = {
--           {
--             '<leader>co',
--             LazyVim.lsp.action['source.organizeImports'],
--             desc = 'Organize Imports',
--           },
--         },
--       },
--       ruff_lsp = {
--         keys = {
--           {
--             '<leader>co',
--             LazyVim.lsp.action['source.organizeImports'],
--             desc = 'Organize Imports',
--           },
--         },
--       },
--     },
--     setup = {
--       [ruff] = function()
--         LazyVim.lsp.on_attach(function(client, _)
--           -- Disable hover in favor of Pyright
--           client.server_capabilities.hoverProvider = false
--         end, ruff)
--       end,
--     },
--   },
-- }, {
--   'neovim/nvim-lspconfig',
--   opts = function(_, opts)
--     local servers = { 'pyright', 'basedpyright', 'ruff', 'ruff_lsp', ruff, lsp }
--     for _, server in ipairs(servers) do
--       opts.servers[server] = opts.servers[server] or {}
--       opts.servers[server].enabled = server == lsp or server == ruff
--     end
--   end,
-- }, {
--   'nvim-neotest/neotest-python',
-- }, {
--   'mfussenegger/nvim-dap-python',
--   -- stylua: ignore
--   keys = {
--     { "<leader>dPt", function() require('dap-python').test_method() end, desc = "Debug Method", ft = "python" },
--     { "<leader>dPc", function() require('dap-python').test_class() end, desc = "Debug Class", ft = "python" },
--   },
--   config = function()
--     if vim.fn.has 'win32' == 1 then
--       require('dap-python').setup(LazyVim.get_pkg_path('debugpy', '/venv/Scripts/pythonw.exe'))
--     else
--       require('dap-python').setup(LazyVim.get_pkg_path('debugpy', '/venv/bin/python'))
--     end
--   end,
-- }
